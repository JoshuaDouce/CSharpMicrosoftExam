---
Revision Notes from the exam @ https://www.exam-labs.com/exam/70-483
---

Question 1 - 1
---
- Marking an operation using a checked block it will gurantee that an overflow exception is thrown

Questioon 2 - 1
---
Date Formats use string formatting
	-{x:t} will give a 24hr date time representation of a time object e.g 20:07
	-{x:hh:mm} will give you it in AM/PM format i.e 8:07pm

Number formatting
	-{x:Ny} where y indicates the degree of decimal precision eg {0:N2} would format 1.394 to 1.39

Acroynms

C - Culture
N - Number
d - day
t - time
h - hour
m - minute
P - %

Syntax
{index[,alignment][ :formatString] }

Question 4 - 1
---
When opening a SQLConnection use sqlConnection.Open() to open the connection to the database
To iterate over a collection of results use a sqlDataReader.Read();

Question 5 - 1
---
-You can use to spiecify different resources for different build types;

#if(DEBUG)
	if debug use this 
#else
	if release use this
#endif

Question 6 - 1
---

//Strongly typed save method, where the type must inherit from animal, with a constructor that takes no parameters
public static void Save<T>(T target) where T : Animale, new()

Question 7 - 1
---
Debug.Assert only works in debug builds

Question 8 - 1
---
XML Structure

Root element ---> Element ---> Attr
                     |
					 |
	    Element <---------> Element ----> Text

An XML element is everything from (including) the element's start tag to (including) the element's end tag.
An element can contain:
	-text
	-attributes
	-other elements
	-or a mix of the above

XML Attributes must always be quoted

<person gender="female"> //Attribute
  <firstname>Anna</firstname>
  <lastname>Smith</lastname>
</person>

<person>
  <gender>female</gender>//Element
  <firstname>Anna</firstname>
  <lastname>Smith</lastname>
</person>

Question 9 - 1
---
A SortedList<TKey, TValue> represents a collection of key vallue pairs based on the associated IComparer<T> implementation

Question 10 - 1
---
To throw an original stack trace just use  the throw keyword when throwing an exception

Question 12 - 1
---
To convert a date time to UTC use the DateTime.TryParse Method (String, IFormatProvider, DateTimeStyles, DateTime)

with the style 

styles = DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeLocal;

Question 13 - 1
---
Trace static class updates the event log

Question 14 - 1
---
Internal - only accesible from the same assembly bot not another assembly
Protected - accessible from in the same or derived classed
Private - only accesible in the same class or struct
Protected internal - can be accessed by any code in the same assembly, or from within a derived class in another assembly
Private protected - can be accesed only within its assembly, code in the same class or in a type that is derived from that class
Public - accessible by any other code in the same assembly or another assembly taht refrences it

Question 16-1
---
Adding a private lockObject to a class allows you to use the lock to ensure thread safety for opertions on objects of that type

Question 17-1
---
GC.SuppressFinalize ensures that the garabage collector ddoes not relase an objects resource

Question 19-1
---
To create a perfomance counter to anlyze the processing of objects follow these steps

-Create a CounterCreationDataCollection. Then create the counters as CounterCreationData objects and set the properties
-Add the counter creation data objects to the collection using the Add() method.
-Call the Create() method of the PerformanceCounterCategory and pass the collection to the method

Question 21-1
---

//.OpenOrCreate ensure exception is not thrown if file does not exist
//FileShare.ReadWrite allows subsequent opening of the file
-var fs = File.Open(FileName, FileMode.OpenOrCreate, FileAccess.Read, FileShare.ReadWrite);

Question 23-1
---
HMACSHA512 can be used ensure validity of data

Question 24-1
---
the sealed keyword prevents a class from being inherited from

Question 30-1
---
If you store a data type in an object you need to cast it back to its original data type before casting it to another eg

var obj = float

var int = (int)(float)obj;

Question 31-1
---
Using the as operator return null instead of throwing an exception if a cinversion is not possible

Question 32-1
---
When implenting IValidateable you must implement the following

public IEnumerable<Validationresult> Validate(ValidationContext valCtxt){
	do something here to validate 
}